<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-build</artifactId>
        <version>2.1.6.RELEASE</version>
        <relativePath/>
    </parent>

    <groupId>com.ssxs.parent</groupId>
    <artifactId>ssxs-parent</artifactId>
    <version>2.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>Spring Cloud Ssxs Parent</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <argLine>-Dfile.encoding=UTF-8</argLine>

        <maven.test.skip>true</maven.test.skip>
        <maven.javadoc.skip>true</maven.javadoc.skip>

        <!--<maven.compiler.source>11</maven.compiler.source>
            <maven.compiler.target>11</maven.compiler.target>-->

        <!-- cloud Dependency -->
        <com.ssxs.cloud.version>2.0.1-SNAPSHOT</com.ssxs.cloud.version>
        <org.springframework.cloud.alibaba.dependencies.version>0.9.0.RELEASE</org.springframework.cloud.alibaba.dependencies.version>
        <com.alibaba.cloud.dependencies.version>0.9.1.RELEASE</com.alibaba.cloud.dependencies.version>
        <org.mybatis.generator.mybatis-plugin.version>1.3.7</org.mybatis.generator.mybatis-plugin.version>

        <!-- Dependency Versions -->
        <spring-cloud-commons.version>2.1.2.RELEASE</spring-cloud-commons.version>
        <spring-cloud-netflix.version>2.1.2.RELEASE</spring-cloud-netflix.version>
        <spring-cloud-openfeign.version>2.1.2.RELEASE</spring-cloud-openfeign.version>
        <spring-cloud-gateway.version>2.1.2.RELEASE</spring-cloud-gateway.version>
        <spring-cloud-bus.version>2.1.2.RELEASE</spring-cloud-bus.version>

        <docker.repostory>registry.cn-shenzhen.aliyuncs.com</docker.repostory>
        <docker.skip.build>false</docker.skip.build>
        <!--<docker.repostory>ccr.ccs.tencentyun.com</docker.repostory>-->
        <docker.registry.name>ssxs-docker</docker.registry.name>

        <!-- <tomcat.version>9.0.21</tomcat.version>-->

        <!-- Build args -->
        <!-- <argline>-server -Xms512m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=256m -Dfile.encoding=UTF-8
                    -Djava.net.preferIPv4Stack=true</argline>-->
    </properties>

    <!-- 使用了nacos等配置服务后，profile暂时使用不上了，可以去除。 -->
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <!-- 环境标识，需要与配置文件的名称相对应 -->
                <activatedProperties>dev</activatedProperties>
            </properties>
            <activation>
                <!-- 默认环境 -->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>qa</id>
            <properties>
                <activatedProperties>qa</activatedProperties>
            </properties>
        </profile>
        <profile>
            <id>prod1</id>
            <properties>
                <activatedProperties>prod1</activatedProperties>
            </properties>
        </profile>
        <profile>
            <id>prod2</id>
            <properties>
                <activatedProperties>prod2</activatedProperties>
            </properties>
        </profile>
    </profiles>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                        <encoding>UTF-8</encoding>
                        <compilerArgument>-Xlint:all</compilerArgument>
                        <fork>true</fork>
                        <showWarnings>true</showWarnings>
                        <showDeprecation>true</showDeprecation>
                        <meminitial>1024m</meminitial>
                        <maxmem>2048m</maxmem>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.1.0</version>
                    <configuration>
                        <archive>
                            <addMavenDescriptor>false</addMavenDescriptor>
                            <index>false</index>
                            <manifest>
                                <addClasspath>true</addClasspath>
                                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.0.1</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>3.0.1</version>
                    <configuration>
                        <encoding>UTF-8</encoding>
                        <charset>UTF-8</charset>
                        <minmemory>1024m</minmemory>
                        <maxmemory>2048m</maxmemory>
                    </configuration>
                    <executions>
                        <execution>
                            <id>attach-javadocs</id>
                            <phase>install</phase>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                            <configuration>
                                <encoding>UTF-8</encoding>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- 解决maven test命令时console出现中文乱码乱码 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.22.0</version>
                    <configuration>
                        <!-- <skip>true</skip> -->
                        <forkMode>once</forkMode>
                        <argLine>-Dfile.encoding=UTF-8</argLine>
                        <!-- <systemProperties> -->
                        <!-- <property> -->
                        <!-- <name>net.sourceforge.cobertura.datafile</name> -->
                        <!-- <value>target/cobertura/cobertura.ser</value> -->
                        <!-- </property> -->
                        <!-- </systemProperties> -->
                    </configuration>
                </plugin>
                <!--如果是通过parent方式继承spring-boot-starter-parent则不用此插件 -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <executable>true</executable>
                        <fork>true</fork>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <!--<goal>repackage</goal>-->
                                <goal>build-info</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.mybatis.generator</groupId>
                    <artifactId>mybatis-generator-maven-plugin</artifactId>
                    <version>${org.mybatis.generator.mybatis-plugin.version}</version>
                    <configuration>
                        <verbose>true</verbose>
                        <overwrite>true</overwrite>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
                <!-- Docker maven plugin -->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>1.2.0</version>
                    <configuration>
                        <!-- 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 -->
                        <serverId>docker-aliyun</serverId>
                        <!--<serverId>docker-qcloud</serverId>-->
                        <registryUrl>${docker.repostory}</registryUrl>
                        <!--配置变量，包括是否build、imageName、imageTag，非常灵活-->
                        <skipDocker>${docker.skip.build}</skipDocker>
                        <!--镜像名，这里用工程名-->
                        <imageName>
                            ${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
                        </imageName>
                        <pushImage>true</pushImage>
                        <!--TAG,这里用工程版本号-->
                        <imageTags>
                            <imageTag>${project.version}</imageTag>
                            <imageTag>latest</imageTag>
                        </imageTags>
                        <forceTags>true</forceTags>
                        <!--镜像的FROM，使用java官方镜像-->
                        <baseImage>java:8u111-jdk</baseImage>
                        <!--该镜像的容器启动后，直接运行spring boot工程，配置好jvm tomcat-->
                        <entryPoint>["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                        <!--构建镜像的配置信息-->
                        <!-- copy the service's jar file from target into the root directory of the image -->
                        <resources>
                            <rescource>
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                            </rescource>
                        </resources>
                    </configuration>
                </plugin>
                <!-- Docker maven plugin -->
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <charset>UTF-8</charset>
                    <minmemory>1024m</minmemory>
                    <maxmemory>2048m</maxmemory>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <phase>install</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <encoding>UTF-8</encoding>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <dependencyManagement>
        <dependencies>
            <!-- ssxs lib -->
            <dependency>
                <groupId>com.ssxs.cloud</groupId>
                <artifactId>spring-cloud-ssxs-dependencies</artifactId>
                <version>${com.ssxs.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${org.springframework.cloud.alibaba.dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

<!--            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>alibaba-spring-cloud-dependencies</artifactId>
                <version>${com.alibaba.cloud.dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>-->

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-commons-dependencies</artifactId>
                <version>${spring-cloud-commons.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-test-support</artifactId>
                <scope>test</scope>
                <version>${spring-cloud-commons.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-netflix</artifactId>
                <version>${spring-cloud-netflix.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-openfeign-dependencies</artifactId>
                <version>${spring-cloud-openfeign.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-gateway-dependencies</artifactId>
                <version>${spring-cloud-gateway.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-bus-dependencies</artifactId>
                <version>${spring-cloud-bus.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>
    <!--    <dependencies>
            <dependency>
                <groupId>javax.annotation</groupId>
                <artifactId>javax.annotation-api</artifactId>
            </dependency>
            <dependency>
                <groupId>javax.xml.bind</groupId>
                <artifactId>jaxb-api</artifactId>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jaxb</groupId>
                <artifactId>jaxb-runtime</artifactId>
            </dependency>
        </dependencies>-->

    <distributionManagement>
        <repository>
            <id>maven-releases</id>
            <name>maven-releases</name>
            <url>http://nexus.ssxingshou.com/repository/maven-releases/</url>
        </repository>
        <snapshotRepository>
            <id>maven-snapshots</id>
            <name>maven-snapshots</name>
            <url>http://nexus.ssxingshou.com/repository/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <!-- 首次使用parentpom的时候，需要在maven的setting里面配置好直接使用二方库 -->
    <repositories>
        <repository>
            <id>maven-public</id>
            <name>maven-public</name>
            <!--<url>http://nexus.ssxingshou.com/repository/maven-public/</url>-->
            <url>https://maven.aliyun.com/repository/public/</url>
        </repository>
<!--        <repository>
            <id>maven-central</id>
            <name>maven-central</name>
            <url>https://repo1.maven.org/maven2/</url>
        </repository>
        <repository>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <id>central</id>
            <name>bintray</name>
            <url>http://jcenter.bintray.com</url>
        </repository>
        <repository>
            <id>sonatype-oss-snapshots</id>
            <name>Sonatype OSS Snapshots Repository</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </repository>-->
    </repositories>

</project>
